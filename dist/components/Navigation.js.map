{
  "version": 3,
  "sources": ["../../src/components/Navigation.ts"],
  "sourcesContent": ["/**\n * Combined navigation scripts in TypeScript for use with Sygnal Framework & Webflow.\n * Original inline comments and functionality have been preserved.\n */\n\ndeclare var lottie: any;\ndeclare var gsap: any;\n\n/**\n * Navigation component for Sygnal Framework & Webflow integration\n */\nexport class Navigation {\n  // Declare class properties\n  private lastScrollTop: number = 0;\n  private navbar: HTMLElement | null = null;\n  private readonly scrollThreshold: number = 50;\n  private readonly mobileBreakpoint: number = 768;\n\n  /**\n   * Initialize the component\n   */\n  public init(): void {\n    // Initialize elements once DOM is ready\n    this.navbar = document.querySelector(\".nav--bar\");\n\n    // Initialize all navigation features\n    this.initScrollBehavior();\n    this.initMegaMenu();\n    this.initDropdowns();\n    this.initLanguageSelector();\n  }\n\n  private initScrollBehavior(): void {\n    // Add smooth transition to the navbar\n    if (this.navbar) {\n      this.navbar.style.transition = \"transform 0.3s ease-in-out\";\n    }\n\n    // Add scroll event listener\n    window.addEventListener(\"scroll\", this.handleScroll.bind(this), {\n      passive: true,\n    });\n  }\n\n  private initMegaMenu(): void {\n    // Select all elements\n    const megaMenu = document.querySelector(\".nav--mega-menu\");\n    const menuButton = document.querySelector(\".btn--hamburger\");\n\n    // Load Lottie animation\n    const lottieAnimation = lottie.loadAnimation({\n      container: document.querySelector(\".lottie--hamburger\"), // the dom element\n      renderer: \"svg\",\n      loop: false,\n      autoplay: false,\n      path: \"https://cdn.prod.website-files.com/6723d26a4aa4a278cad8f59c/6777ecd6636dc4314d954783_Icon%20-%20Hamburger%20Menu.json\",\n    });\n\n    // Function to open the menu\n    function openMenu() {\n      if (!megaMenu) return;\n      megaMenu.style.display = \"flex\"; // Set display to flex before animation\n      gsap.to(megaMenu, {\n        duration: 0.8,\n        height: \"100svh\",\n        width: \"100%\",\n        ease: \"power2.out\",\n        delay: 0.2,\n        onComplete: () => {\n          megaMenu.style.borderRadius = \"0rem\";\n        },\n      });\n      lottieAnimation.playSegments([0, 70], true);\n    }\n\n    // Function to close the menu\n    function closeMenu() {\n      if (!megaMenu) return;\n      megaMenu.style.borderRadius = \"1rem\";\n      gsap.to(megaMenu, {\n        duration: 0.4,\n        height: \"0svh\",\n        width: \"100%\",\n        ease: \"power2.in\",\n        onComplete: () => {\n          megaMenu.style.display = \"none\";\n        },\n      });\n\n      // Remove any existing complete listeners first\n      lottieAnimation.removeEventListener(\"complete\");\n\n      // Play the close animation\n      lottieAnimation.playSegments([70, 140], true);\n\n      // Add the complete listener\n      lottieAnimation.addEventListener(\"complete\", () => {\n        lottieAnimation.goToAndStop(0, true);\n        // Remove the listener after it executes to prevent memory leaks\n        lottieAnimation.removeEventListener(\"complete\");\n      });\n    }\n\n    // Toggle menu on button click\n    let isOpen = false;\n    if (menuButton) {\n      menuButton.addEventListener(\"click\", () => {\n        if (!isOpen) {\n          openMenu();\n        } else {\n          closeMenu();\n        }\n        isOpen = !isOpen;\n      });\n    }\n  }\n\n  private initDropdowns(): void {\n    // Select all dropdown containers\n    const dropdowns = Array.from(document.querySelectorAll(\".nav--dropdown\"));\n\n    if (!dropdowns.length) {\n      console.error(\"No dropdown elements found in the DOM!\");\n    } else {\n      // Select the main navigation container once\n      const navigation = document.querySelector(\".nav--bar\");\n\n      if (!navigation) {\n        console.error(\"Navigation container (.navigation) not found!\");\n      } else {\n        // Initialize dropdown data\n        const dropdownData = dropdowns\n          .map((dropdown) => {\n            const dropdownToggle = dropdown.querySelector(\".btn--nav-dropdown\");\n            const dropdownMenu = dropdown.querySelector(\".nav--dropdown-menu\");\n            const dropdownIcon = dropdown.querySelector(\".icon--svg.is--nav\");\n\n            if (!dropdownToggle || !dropdownMenu || !dropdownIcon) {\n              console.warn(\n                \"Some required elements (dropdownToggle, dropdownMenu, dropdownIcon) are missing in a .nav--dropdown!\"\n              );\n              return null;\n            }\n\n            return {\n              dropdown,\n              toggle: dropdownToggle, // Button that triggers dropdown\n              dropdownMenu: dropdownMenu, // (Renamed from \"menu\" to \"dropdownMenu\")\n              icon: dropdownIcon, // Rotation indicator for dropdown state\n              isOpen: false, // Tracks if menu is visible\n              animating: false, // Prevents interaction during animations\n            };\n          })\n          .filter((d) => d !== null);\n\n        /**\n         * Utility function to create a GSAP timeline for opening a dropdown\n         */\n        const createOpenTimeline = (d: {\n          dropdownMenu: HTMLElement;\n          icon: HTMLElement;\n          toggle: HTMLElement;\n          animating: boolean;\n        }) => {\n          const tl = gsap.timeline({\n            onStart: () => {\n              d.animating = true;\n            },\n            onComplete: () => {\n              d.animating = false;\n            },\n          });\n\n          // Check if we're on desktop (window width > 768px)\n          const isDesktop = window.matchMedia(\"(min-width: 768px)\").matches;\n\n          tl.fromTo(\n            d.dropdownMenu,\n            { opacity: 0, height: 0 },\n            { opacity: 1, height: \"auto\", duration: 0.3, ease: \"power2.out\" }\n          )\n            .to(\n              d.icon,\n              { rotation: 180, duration: 0.3, ease: \"power2.out\" },\n              \"<\"\n            )\n            .to(\n              d.toggle,\n              { backgroundColor: \"var(--secondary--darkest)\", duration: 0.3 },\n              \"<\"\n            );\n\n          // Only add border radius animation on desktop\n          if (isDesktop) {\n            tl.to(\n              navigation,\n              {\n                borderBottomLeftRadius: \"0\",\n                borderBottomRightRadius: \"0\",\n                duration: 0.3,\n                ease: \"power2.out\",\n              },\n              \"<\"\n            );\n          }\n\n          return tl;\n        };\n\n        /**\n         * Utility function to create a GSAP timeline for closing a dropdown\n         */\n        const createCloseTimeline = (d: {\n          dropdownMenu: HTMLElement;\n          icon: HTMLElement;\n          toggle: HTMLElement;\n          animating: boolean;\n        }) => {\n          const tl = gsap.timeline({\n            onStart: () => {\n              d.animating = true;\n            },\n            onComplete: () => {\n              d.animating = false;\n            },\n          });\n\n          // Check if we're on desktop (window width > 768px)\n          const isDesktop = window.matchMedia(\"(min-width: 768px)\").matches;\n\n          tl.fromTo(\n            d.dropdownMenu,\n            { opacity: 1, height: d.dropdownMenu.scrollHeight },\n            { opacity: 0, height: 0, duration: 0.3, ease: \"power2.in\" }\n          )\n            .to(d.icon, { rotation: 0, duration: 0.3, ease: \"power2.in\" }, \"<\")\n            .to(d.toggle, { backgroundColor: \"\", duration: 0.3 }, \"<\");\n\n          // Only add border radius animation on desktop\n          if (isDesktop) {\n            tl.to(\n              navigation,\n              {\n                borderBottomLeftRadius: \"1rem\",\n                borderBottomRightRadius: \"1rem\",\n                duration: 0.3,\n                ease: \"power2.in\",\n              },\n              \"<\"\n            );\n          }\n\n          return tl;\n        };\n\n        /**\n         * Closes all open dropdowns except the specified one\n         */\n        const closeAllDropdowns = (except: any = null) => {\n          dropdownData.forEach((d: any) => {\n            if (d !== except && d.isOpen && !d.animating) {\n              closeDropdown(d);\n            }\n          });\n        };\n\n        /**\n         * Opens a specific dropdown\n         */\n        const openDropdown = (d: any) => {\n          createOpenTimeline(d).play();\n          d.isOpen = true;\n        };\n\n        /**\n         * Closes a specific dropdown\n         */\n        const closeDropdown = (d: any) => {\n          createCloseTimeline(d).play();\n          d.isOpen = false;\n        };\n\n        // Attach event listeners to each dropdown toggle\n        dropdownData.forEach((d: any) => {\n          if (!d) return;\n          d.toggle.addEventListener(\"click\", () => {\n            if (d.animating) return; // Prevent action if animating\n\n            // Toggle the dropdown\n            if (d.isOpen) {\n              closeDropdown(d);\n            } else {\n              closeAllDropdowns(d); // Close others before opening\n              openDropdown(d);\n            }\n          });\n        });\n\n        // Event listener to close dropdowns when clicking outside\n        document.addEventListener(\"click\", (e) => {\n          dropdownData.forEach((d: any) => {\n            if (d.isOpen && !d.animating) {\n              const clickedInside =\n                d.dropdown.contains(e.target) || d.toggle.contains(e.target);\n              if (!clickedInside) {\n                closeDropdown(d);\n              }\n            }\n          });\n        });\n\n        // Close dropdowns when pressing the Escape key\n        document.addEventListener(\"keydown\", (e) => {\n          if (e.key === \"Escape\") {\n            closeAllDropdowns();\n          }\n        });\n      }\n    }\n  }\n\n  private initLanguageSelector(): void {\n    // Selectors for the language button, dropdown, and rotating icon\n    const languageBtn = document.querySelector('[class*=\"language--btn-w\"]');\n    const languageDropdown = document.querySelector(\n      '[class*=\"language--dropdown-w\"]'\n    );\n    const languageIcon = document.querySelector(\".icon--svg.is--language\");\n\n    // Safety check to ensure required elements exist\n    if (!languageBtn || !languageDropdown || !languageIcon) {\n      console.error(\"Required elements not found!\");\n    } else {\n      // Function to open or close the dropdown\n      const toggleDropdown = (isOpen: boolean) => {\n        // Rotate the language icon (0\u00B0 closed, 180\u00B0 open)\n        gsap.to(languageIcon, {\n          rotation: isOpen ? 180 : 0,\n          duration: 0.4,\n          ease: \"power2.out\",\n        });\n\n        // Toggle the button's background color based on state\n        gsap.to(languageBtn, {\n          backgroundColor: isOpen\n            ? \"var(--secondary--darkest)\"\n            : \"var(--secondary--darker)\",\n          duration: 0.3,\n        });\n\n        if (isOpen) {\n          // First set initial state\n          gsap.set(languageDropdown, {\n            visibility: \"visible\",\n            height: 0,\n            opacity: 0,\n          });\n\n          // Animate to final state\n          gsap.to(languageDropdown, {\n            opacity: 1,\n            height: \"auto\",\n            duration: 0.5,\n            ease: \"power3.out\",\n          });\n        } else {\n          // Animate back to closed state\n          gsap.to(languageDropdown, {\n            opacity: 0,\n            height: 0,\n            duration: 0.5,\n            ease: \"power3.in\",\n            onComplete: () => {\n              gsap.set(languageDropdown, { visibility: \"hidden\" });\n            },\n          });\n        }\n      };\n\n      // Hover effect: expand button width on hover in\n      languageBtn.addEventListener(\"mouseenter\", () => {\n        if (!languageBtn.classList.contains(\"clicked\")) {\n          gsap.to(languageBtn, {\n            width: \"4.75rem\",\n            backgroundColor: \"var(--secondary--darker)\",\n            duration: 0.3,\n            ease: \"power2.out\",\n          });\n        }\n      });\n\n      // Hover effect: collapse button width on hover out\n      languageBtn.addEventListener(\"mouseleave\", () => {\n        if (!languageBtn.classList.contains(\"clicked\")) {\n          gsap.to(languageBtn, {\n            width: \"2rem\",\n            backgroundColor: \"var(--secondary--darker)\",\n            duration: 0.3,\n            ease: \"power2.in\",\n          });\n        }\n      });\n\n      // Click event: toggle dropdown open/close\n      languageBtn.addEventListener(\"click\", () => {\n        const isClicked = languageBtn.classList.toggle(\"clicked\");\n        toggleDropdown(isClicked);\n      });\n\n      // Close dropdown if clicking outside the button or dropdown, or on another dropdown trigger\n      document.addEventListener(\"click\", (event) => {\n        const target = event.target as Node | null;\n        if (!target) return;\n\n        const isInside =\n          languageBtn.contains(target) || languageDropdown.contains(target);\n        const isDropdownTrigger = (target as HTMLElement).closest(\n          \".btn--nav-dropdown\"\n        );\n\n        if (\n          (!isInside && languageBtn.classList.contains(\"clicked\")) ||\n          (isDropdownTrigger && !languageDropdown.contains(isDropdownTrigger))\n        ) {\n          languageBtn.classList.remove(\"clicked\");\n          toggleDropdown(false);\n\n          // Perform the hover-out action to reset the button width\n          gsap.to(languageBtn, {\n            width: \"2rem\",\n            backgroundColor: \"var(--secondary--darker)\",\n            duration: 0.3,\n            ease: \"power2.in\",\n          });\n        }\n      });\n    }\n  }\n\n  private handleScroll(): void {\n    // Only run on desktop\n    if (window.innerWidth <= this.mobileBreakpoint) return;\n\n    const currentScroll =\n      window.pageYOffset || document.documentElement.scrollTop;\n\n    // Check if user has scrolled more than threshold\n    if (Math.abs(this.lastScrollTop - currentScroll) <= this.scrollThreshold)\n      return;\n\n    // Scrolling down & not at the top\n    if (currentScroll > this.lastScrollTop && currentScroll > 50) {\n      if (this.navbar) {\n        this.navbar.style.transform = \"translateY(-200%)\";\n      }\n    }\n    // Scrolling up\n    else {\n      if (this.navbar) {\n        this.navbar.style.transform = \"translateY(0)\";\n      }\n    }\n\n    this.lastScrollTop = currentScroll;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
